{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Catgram API"
  },
  "servers": [
    {
      "url": "https://cat-gram.herokuapp.com/"
    }
  ],
  "paths": {
    "/posts": {
      "get": {
        "summary": "List of all available posts",
        "tags": [
          "posts"
        ],
        "responses": {
          "200": {
            "description": "An array of posts",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "author": "5b4c383b6eb02e0a56534c6g",
                      "caption": "Cheesy caption for post1",
                      "image": "https://sampleurl.com"
                    },
                    {
                      "author": "5b4c383b6eb02e0a56334c6d",
                      "caption": "Meow meow caption",
                      "image": "https://sampleurl.com"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a post",
        "tags": [
          "posts"
        ],
        "requestBody": {
          "description": "Post object to be added",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "author": "5b4c383b6eb02e0a56534c6g",
                  "caption": "My new post",
                  "image": "https://sampleurl.com"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Post created successfully."
          },
          "400": {
            "description": "Request body is not a valid Post object"
          }
        }
      }
    },
    "/carparks/search": {
      "get": {
        "summary": "Search for carparks",
        "tags": [
          "carparks"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "keyword",
            "schema": {
              "type": "string"
            },
            "description": "The search keyword that will be matched against the address fields of the carparks"
          },
          {
            "in": "query",
            "name": "carparkType",
            "schema": {
              "type": "string",
              "enum": ["basement", "surface", "multistorey", "mechanised", "covered", "mechanised_and_surface", "surface_and_multistorey"]
            },
            "description": "The type of carpark to search for"
            
          },
          {
            "in": "query",
            "name": "systemType",
            "schema": {
              "type": "string",
              "enum": ["electronic", "coupon"]
            },
            
            "description": "The type of the carpark system to search for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of carparks that matches the search",
            "content": {
              "application/json": {
                "schema": {
                  "example": [{
                    "car_park_no": "B67",
                        "address": "BLK 649A JALAN TENAGA",
                        "x_coord": "36132.6219",
                        "y_coord": "34913.1736",
                        "car_park_type": "MULTI-STOREY CAR PARK",
                        "type_of_parking_system": "ELECTRONIC PARKING",
                        "short_term_parking": "WHOLE DAY",
                        "free_parking": "SUN & PH FR 7AM-10.30PM",
                        "night_parking": "YES"
                  },{
                        "car_park_no": "B72",
                        "address": "BLK 660A JALAN TENAGA",
                        "x_coord": "36243.3489",
                        "y_coord": "35174.2762",
                        "car_park_type": "MULTI-STOREY CAR PARK",
                        "type_of_parking_system": "ELECTRONIC PARKING",
                        "short_term_parking": "WHOLE DAY",
                        "free_parking": "SUN & PH FR 7AM-10.30PM",
                        "night_parking": "YES"
                    }]
                }
              }
            }
          }
        }
      }
    },
    "/posts/{post_id}": {
      "get": {
        "summary": "Retrieve a post of that id ",
        "tags": [
          "posts"
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "The id of the post to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post object of the given id",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "author": "5b4c383b6eb02e0a56534c6g",
                    "caption": "My Cheesy Caption",
                    "image": "https://sampleurl.com"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Post not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Cannot find post with this id!"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Invalid post id parameter"
          }
        }
      },
      "put": {
        "summary": "Update post with the specified id",
        "tags": [
          "posts"
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "The id of the post to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated fields for post",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "caption": "Newly updated caption!"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post object with the updated fields",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "author": "5b4c383b6eb02e0a56534c6g",
                    "caption": "Newly Updated caption!",
                    "image": "https://sampleurl.com"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Post not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Cannot find post with this id!"
                  }
                }
              }
            }
          },
           "500": {
            "description": "Invalid post id parameter"
          }
        }
      },
      "delete": {
        "summary": "Delete post with the specified id",
        "tags": [
          "posts"
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "The id of the post to be deleted",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post is successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Successfully deleted post with ID 5b4c383b6eb02e0a56534c6e"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Post not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Cannot find post with this id!"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Invalid post id parameter"
          }
        }
      }
    }
  }
}